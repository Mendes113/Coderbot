# docker-compose.optimized.yml

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

services:
  # PocketBase Database (core profile)
  pocketbase:
    build:
      context: .
      dockerfile: docker/Dockerfile.pocketbase
    # NÃO usar container_name / ports no host
    expose:
      - "8090"
    volumes:
      - pocketbase_data:/pb/pb_data
      - ./pocketbase/pb_migrations:/pb/pb_migrations:ro
    environment:
      - POCKETBASE_ADMIN_EMAIL=${POCKETBASE_ADMIN_EMAIL}
      - POCKETBASE_ADMIN_PASSWORD=${POCKETBASE_ADMIN_PASSWORD}
    command: ["sh","-lc","exec /pb/pocketbase serve --http 0.0.0.0:8090 --dir /pb/pb_data --migrationsDir /pb/pb_migrations --origins='*'"]
    networks:
      - coderbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    cpus: "0.50"
    mem_limit: "512m"
    ulimits:
      nofile:
        soft: 8192
        hard: 65536
    stop_grace_period: 10s

  # Backend API (core profile) - otimizado
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    # sem container_name / sem ports
    environment:
      - DEEP_SEEK_API_KEY=${DEEP_SEEK_API_KEY}
      - DEEP_SEEK_API_URL=${DEEP_SEEK_API_URL}
      - OPEN_AI_API_KEY=${OPEN_AI_API_KEY}
      - OPENAI_API_URL=${OPENAI_API_URL}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      - OLLAMA_DEFAULT_MODEL=${OLLAMA_DEFAULT_MODEL:-qwen2.5-coder:1.5b}
      - RAPIDAPI_KEY=${RAPIDAPI_KEY}
      # SDK-compatible env aliases
      - ANTHROPIC_API_KEY=${CLAUDE_API_KEY:-}
      - OPENAI_API_KEY=${OPEN_AI_API_KEY:-}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - POCKETBASE_URL=http://pocketbase:8090
      - POCKETBASE_USER_EMAIL=${POCKETBASE_USER_EMAIL}
      - POCKETBASE_USER_PASSWORD=${POCKETBASE_USER_PASSWORD}
      - POCKETBASE_ADMIN_EMAIL=${POCKETBASE_ADMIN_EMAIL}
      - POCKETBASE_ADMIN_PASSWORD=${POCKETBASE_ADMIN_PASSWORD}
      # Prefer local Judge0 only quando perfil judge estiver ativo
      - LOCAL_JUDGE0_URL=http://judge0:2358
      # PostHog (server-side opcional)
      - POSTHOG_API_KEY=${POSTHOG_API_KEY:-}
      - POSTHOG_HOST=${POSTHOG_HOST:-https://us.i.posthog.com}
      # PDM cache em tmpfs para evitar I/O no container
      - PDM_HOME=/tmp/pdm
      # Workers do Uvicorn (ajuste conforme CPU disponível)
      - UVICORN_WORKERS=${UVICORN_WORKERS:-1}
    depends_on:
      pocketbase:
        condition: service_healthy
    networks:
      - coderbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    init: true
    command: ["sh", "-lc", "pdm run uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers=${UVICORN_WORKERS:-1} --log-level=info"]
    cpus: "1.00"
    mem_limit: "768m"
    ulimits:
      nofile:
        soft: 16384
        hard: 65536
    pids_limit: 256
    tmpfs:
      - /tmp
    extra_hosts:
      - "host.docker.internal:host-gateway"
    stop_grace_period: 10s

  # Frontend React App (core profile)
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        VITE_POCKETBASE_URL: /pb
        VITE_PUBLIC_POSTHOG_KEY: ${VITE_PUBLIC_POSTHOG_KEY:-}
        VITE_PUBLIC_POSTHOG_HOST: ${VITE_PUBLIC_POSTHOG_HOST:-https://us.i.posthog.com}
    environment:
      - VITE_POCKETBASE_URL=/pb
      - VITE_PUBLIC_POSTHOG_KEY=${VITE_PUBLIC_POSTHOG_KEY:-}
      - VITE_PUBLIC_POSTHOG_HOST=${VITE_PUBLIC_POSTHOG_HOST:-https://us.i.posthog.com}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - coderbot-network
    restart: unless-stopped
    # Se seu nginx do frontend escuta em 80, ajuste este healthcheck para 80
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    cpus: "0.50"
    mem_limit: "256m"
    ulimits:
      nofile:
        soft: 8192
        hard: 65536
    stop_grace_period: 10s

  # Reverse proxy único (nginx) - exposto ao Traefik do Dokploy
  nginx:
    image: nginx:alpine
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
      pocketbase:
        condition: service_healthy
    # sem ports no host; Traefik publica
    expose:
      - "80"
    networks:
      - coderbot-network
      - dokploy-network
    restart: unless-stopped
    logging: *default-logging
    cpus: "0.25"
    mem_limit: "128m"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    labels:
      - traefik.enable=true
      - traefik.docker.network=dokploy-network
      - traefik.http.routers.coderbot-hmg.rule=Host(`hmg.coderbot.space`) || Host(`hmg.coderbot.shop`)
      - traefik.http.routers.coderbot-hmg.entrypoints=websecure
      - traefik.http.routers.coderbot-hmg.tls=true
      - traefik.http.services.coderbot-hmg.loadbalancer.server.port=80
      # HTTP -> HTTPS
      - traefik.http.routers.coderbot-hmg-http.rule=Host(`hmg.coderbot.space`) || Host(`hmg.coderbot.shop`)
      - traefik.http.routers.coderbot-hmg-http.entrypoints=web
      - traefik.http.routers.coderbot-hmg-http.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https

volumes:
  pocketbase_data:
    driver: local

networks:
  coderbot-network:
    driver: bridge
  dokploy-network:
    external: true
